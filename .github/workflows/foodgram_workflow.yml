name: Django-app workflow

on: [push]

jobs:
  
  build_and_push_to_docker_hub:
    name: Push image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 
      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2 
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:v1

  deploy:
    name: Deploy on server
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker-compose stop
            sudo docker-compose rm -f web
            sudo docker images -a | grep 'backend' | awk '{print $3}' |xargs sudo docker rmi
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:v1
            sudo systemctl stop nginx
            rm .env
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo 'DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}' >> .env
            sudo docker-compose up -d
            sudo docker-compose exec -T web python manage.py migrate
            sudo docker-compose exec -T web python manage.py collectstatic --no-input
            cat db.json | sudo docker-compose exec -T web python manage.py loaddata --format=json -
